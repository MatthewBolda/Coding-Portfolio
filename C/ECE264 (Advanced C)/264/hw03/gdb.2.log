Breakpoint 1 at 0x4005e5: file prime_factor.c, line 17.
Starting program: /home/shay/a/mbolda/264/hw03/prime_factor 

Breakpoint 1, print_prime_factors (n=6) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=1) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=0) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=48) at prime_factor.c:17
17	    if(n <= 0) {
Continuing.

Breakpoint 1, print_prime_factors (n=49) at prime_factor.c:17
17	    if(n <= 0) {
Execute until the program reaches a source line greater than the current
or a specified location (same args as break command) within the current frame.
12	|*           This is about finding bugs.             *|
13	|*                                                   *|
14	\*****************************************************/
15	
16	void print_prime_factors(int n) {
17	    if(n <= 0) {
18	        printf("Only positive numbers are supported.\n");
19	    }
20	    else {
21	        printf("Prime factors of %d:", n);
22	
23	        if(n == 1) {
24	            printf(" (none)");
25	        }
26	        else {
27	            // Print all occurrences of 2 in the prime factorization
28	            while(n % 2 == 0) {
29	                printf(" %d", 2);
30	                n /= 2;  // Divide n by 2 (integer division)
31	            }
32	
33	            // Try all odd integers, from 3 to sqrt(n)
34	            for(int i = 3; i * i < n; i += 2) {
35	
36	                // Print all occurrences of i in the prime factorization
37	                while(n % i == 0) {
38	                    printf(" %d", i);
39	                    n /= i; // Divide n by i (integer division)
40	                }
41	            }
print_prime_factors (n=49) at prime_factor.c:34
34	            for(int i = 3; i * i < n; i += 2) {
37	                while(n % i == 0) {
34	            for(int i = 3; i * i < n; i += 2) {
$1 = 3
37	                while(n % i == 0) {
$2 = 5
34	            for(int i = 3; i * i < n; i += 2) {
$3 = 5
43	            if(n >= 3) {
No symbol "i" in current context.
No locals.
n = 49
38	                    printf(" %d", i);
39	                    n /= i; // Divide n by i (integer division)
40	                }
41	            }
42	
43	            if(n >= 3) {
44	                printf(" %d", n);
45	            }
46	        }
47	        printf("\n");
44	                printf(" %d", n);
Quit
Continuing.

Breakpoint 1, print_prime_factors (n=74) at prime_factor.c:17
17	    if(n <= 0) {
